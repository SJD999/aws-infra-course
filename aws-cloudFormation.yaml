AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Resources:
    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "bcuket-${IAMRole}"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            ReplicationConfiguration: 
                Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/aws-lmbda-role-lfbkp6bq"
                Rules: 
                  - 
                    Id: "aws-replcation"
                    Status: "Enabled"
                    Destination: 
                        Bucket: "arn:aws:s3:::awsdestination-ccourse"
            VersioningConfiguration: 
                Status: "Enabled"
            OwnershipControls: 
                Rules: 
                  - 
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    Route53RecordSet:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Sub "helloworld.${Route53RecordSet2}"
            Type: "A"
            AliasTarget: 
                HostedZoneId: "Z2FDTNDATAQYW2"
                DNSName: "dhxdnx12fvgz3.cloudfront.net."
                EvaluateTargetHealth: false
            HostedZoneId: !Ref Route53HostedZone

    S3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Ref S3Bucket
            PolicyDocument: 
                Version: "2008-10-17"
                Id: "PolicyForCloudFrontPrivateContent"
                Statement: 
                  - 
                    Sid: "AllowCloudFrontServicePrincipal"
                    Effect: "Allow"
                    Principal: 
                        Service: "cloudfront.amazonaws.com"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
                    Condition: 
                        StringEquals: 
                            "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/EQ4ANF6ZFLS7O"

    Route53HostedZone:
        Type: "AWS::Route53::HostedZone"
        Properties:
            Name: !Ref Route53RecordSet2

    Route53RecordSet2:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Ref Route53RecordSet3
            Type: "NS"
            TTL: 172800
            ResourceRecords: 
              - "ns-267.awsdns-33.com."
              - "ns-2014.awsdns-59.co.uk."
              - "ns-977.awsdns-58.net."
              - "ns-1323.awsdns-37.org."
            HostedZoneId: "Z04503221RDEAPWTI5IX4"

    Route53RecordSet3:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: "dlbsepcp01aws.online."
            Type: "SOA"
            TTL: 900
            ResourceRecords: 
              - "ns-267.awsdns-33.com. awsdns-hostmaster.amazon.com. 1 7200 900 1209600 86400"
            HostedZoneId: "Z04503221RDEAPWTI5IX4"

    Route53RecordSet4:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Sub "_34e4af436ed8332e252e1e0b558080eb.${Route53RecordSet2}"
            Type: "CNAME"
            TTL: 300
            ResourceRecords: 
              - "_17c3172bd2b8f124238a0aac889c9c31.mhbtsbpdnt.acm-validations.aws."
            HostedZoneId: !Ref Route53HostedZone

    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "serveless-web-app"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
            Description: "Allows Lambda functions to call AWS services on your behalf."

    IAMServiceLinkedRole:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "dynamodb.application-autoscaling.amazonaws.com"

    IAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "aws-course-duc-accses"
            Path: "/"
            PolicyDocument: |
                {
                	"Version": "2012-10-17",
                	"Statement": [
                		{
                			"Sid": "VisualEditor0",
                			"Effect": "Allow",
                			"Action": [
                				"dynamodb:PutItem",
                				"dynamodb:GetItem",
                				"dynamodb:UpdateItem"
                			],
                			"Resource": "arn:aws:dynamodb:eu-central-region:*:table/sessions"
                		}
                	]
                }
